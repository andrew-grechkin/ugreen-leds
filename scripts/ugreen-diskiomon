#!/usr/bin/env bash

set -Eeuo pipefail

# shellcheck disable=SC1091

lock_app="/var/run/ugreen-diskiomon.lock"

if [[ -f "$lock_app" ]]; then
	echo "$(basename "$0") is already running, exiting"
	exit 1
fi

exit-ugreen-diskiomon() {
	rm -f "$lock_app"
	[[ -n "${disk_online_check_pid:-}" ]] && kill "$disk_online_check_pid"
	[[ -n "${smart_check_pid:-}" ]]       && kill "$smart_check_pid"
	[[ -n "${standby_checker_pid:-}" ]]   && kill "$standby_checker_pid"
} 2>/dev/null; trap 'exit-ugreen-diskiomon' EXIT

touch "$lock_app"

# use variables from config file (unRAID specific)
if [[ -r /boot/config/plugins/ugreenleds-driver/settings.cfg ]]; then
	source "/boot/config/plugins/ugreenleds-driver/settings.cfg"
fi

# load environment variables
if [[ -r /etc/ugreen-leds.conf ]]; then
	source "/etc/ugreen-leds.conf"
fi

# led-disk mapping (see https://github.com/miskcoo/ugreen_dx4600_leds_controller/pull/4)
MAPPING_METHOD="${MAPPING_METHOD:=ata}" # ata, hctl, serial
leds=("disk1" "disk2" "disk3" "disk4" "disk5" "disk6" "disk7" "disk8")

# hctl, $> lsblk -S -x hctl -o hctl,serial,name
# NOTE: It is reported that the order below should be adjusted for each model.
#       Please check the disk mapping section in https://github.com/miskcoo/ugreen_dx4600_leds_controller/blob/master/README.md.
hctl_map=("0:0:0:0" "1:0:0:0" "2:0:0:0" "3:0:0:0" "4:0:0:0" "5:0:0:0" "6:0:0:0" "7:0:0:0")
# serial number, $> lsblk -S -x hctl -o hctl,serial,name
serial_map=("${DISK_SERIAL:-}")
# ata number, $> ls /sys/block | egrep ata\d
ata_map=("ata1" "ata2" "ata3" "ata4" "ata5" "ata6" "ata7" "ata8")

if which dmidecode > /dev/null; then
	product_name=$(dmidecode --string system-product-name)
	case "$product_name" in
		DXP6800*)   # tested on DXP6800 Pro
			echo "Found UGREEN DXP6800 series"
			hctl_map=("2:0:0:0" "3:0:0:0" "4:0:0:0" "5:0:0:0" "0:0:0:0" "1:0:0:0")
			ata_map=("ata3" "ata4" "ata5" "ata6" "ata1" "ata2")
			;;
		DX4600*)   # tested on DX4600 Pro
			echo "Found UGREEN DX4600 series"
			;;
		DX4700*)
			echo "Found UGREEN DX4700 series"
			;;
		DXP2800*)   # see issue #19
			echo "Found UGREEN DXP2800 series"
			;;
		DXP4800*)
			echo "Found UGREEN DXP4800 series"
			;;
		DXP8800*)  # tested on DXP8800 Plus
			echo "Found UGREEN DXP8800 series"
			# using the default mapping
			;;
		*)
			if [[ "$MAPPING_METHOD" == "hctl" || "$MAPPING_METHOD" == "ata" ]]; then
				echo -e "\033[0;31mUsing the default HCTL order. Please check it maps to your disk slots correctly."
				echo -e "If you confirm that the HCTL order is correct, or find it is different, you can "
				echo -e "submit an issue to let us know, so we can update the script."
				echo -e "Please read the disk mapping section in the link below for more details. "
				echo -e "   https://github.com/miskcoo/ugreen_dx4600_leds_controller/blob/master/README.md\033[0m"
			fi
			;;
	esac
elif [[ "$MAPPING_METHOD" == "hctl" || "$MAPPING_METHOD" == "ata" ]]; then
	echo -e "\033[0;31minstalling the tool $(dmidecode) is suggested; otherwise the script cannot detect your device and adjust the hctl/ata_map\033[0m"
fi

# => defaults ----------------------------------------------------------------------------------------------------- {{{1

# set monitor SMART information to true by default if not running unRAID
if [[ -f /etc/unraid-version ]]; then
	CHECK_SMART=false
else
	CHECK_SMART="${CHECK_SMART:-true}"
fi
# polling rate for smartctl. 360 seconds by default
CHECK_SMART_INTERVAL="${CHECK_SMART_INTERVAL:-360}"
# refresh interval from disk leds
LED_REFRESH_INTERVAL="${LED_REFRESH_INTERVAL:-0.3}"

# whether to check zpool health
CHECK_ZPOOL="${CHECK_ZPOOL:-false}"
# polling rate for checking zpool health. 5 seconds by default
CHECK_ZPOOL_INTERVAL="${CHECK_ZPOOL_INTERVAL:-5}"

# polling rate for checking disk online. 5 seconds by default
CHECK_DISK_ONLINE_INTERVAL="${CHECK_DISK_ONLINE_INTERVAL:-5}"

COLOR_DISK_HEALTH="${COLOR_DISK_HEALTH:-"255 255 255"}"
COLOR_DISK_UNAVAIL="${COLOR_DISK_UNAVAIL:-"255 0 0"}"
COLOR_DISK_STANDBY="${COLOR_DISK_STANDBY:-"0 0 255"}"
COLOR_ZPOOL_FAIL="${COLOR_ZPOOL_FAIL:-"255 0 0"}"
COLOR_SMART_FAIL="${COLOR_SMART_FAIL:-"255 0 0"}"
BRIGHTNESS_DISK_LEDS="${BRIGHTNESS_DISK_LEDS:-128}"

function is_disk_healthy_or_standby() {
	if [[ "${1:-}" == "$COLOR_DISK_HEALTH" || "${1:-}" == "$COLOR_DISK_STANDBY" ]]; then
		return 0  # 0 means successful
	else
		return 1
	fi
}

# => detect devices ----------------------------------------------------------------------------------------------- {{{1

echo "Enumerating disks based on method: $MAPPING_METHOD"
declare -A dev_map
while read -r line; do
	read -r <<< "$line" led dev _id
	dev_map["$led"]="$dev"
	echo "$MAPPING_METHOD" "$dev" "->" "$led"
done <<< "$(ugreen-disk-enum)"

# => initialize LEDs ---------------------------------------------------------------------------------------------- {{{1

{ lsmod | grep ledtrig_oneshot >/dev/null; } || { modprobe -v ledtrig_oneshot && sleep 2; }

for led in "${leds[@]}"; do
	if [[ -d "/sys/class/leds/$led" ]]; then
		echo 1                       > "/sys/class/leds/$led/invert"
		echo 100                     > "/sys/class/leds/$led/delay_on"
		echo 100                     > "/sys/class/leds/$led/delay_off"
		echo "$COLOR_DISK_HEALTH"    > "/sys/class/leds/$led/color"
		echo "$BRIGHTNESS_DISK_LEDS" > "/sys/class/leds/$led/brightness"
		echo oneshot                 > "/sys/class/leds/$led/trigger"

		if [[ -v "dev_map[$led]" ]]; then
			dev="${dev_map[$led]}"
		else
			# turn off the led if no disk installed on this slot
			echo 0    > "/sys/class/leds/$led/brightness"
			echo none > "/sys/class/leds/$led/trigger"
		fi
	fi
done

# => check disk smart health -------------------------------------------------------------------------------------- {{{1

if [[ "$CHECK_SMART" == 'true' ]]; then
	(
		while ((1)); do
			for led in "${!dev_map[@]}"; do
				color="$(cat "/sys/class/leds/$led/color")"
				if ! is_disk_healthy_or_standby "$color"; then
					continue;
				fi

				dev="${dev_map[$led]}"

				# read the smart status return code, but ignore if the drive is on standby
				/usr/sbin/smartctl -H "/dev/$dev" -n standby,0 &>/dev/null
				ret="$?"

				# check return code for critical errors (any bit set except bit 5)
				# possible return bits set: https://invent.kde.org/system/kpmcore/-/merge_requests/28
				if (( ret & ~32 )); then
					echo "$COLOR_SMART_FAIL" > "/sys/class/leds/$led/color"
					echo "Disk failure detected on /dev/$dev at: $(date --rfc-3339=seconds)" >&2
				fi
			done

			sleep "${CHECK_SMART_INTERVAL}s"
		done
	) &
	smart_check_pid="$!"
fi

# => check disk status -------------------------------------------------------------------------------------------- {{{1

(
	while ((1)); do
		for led in "${!dev_map[@]}"; do
			dev="${dev_map[$led]}"

			color="$(cat "/sys/class/leds/$led/color")"
			if ! is_disk_healthy_or_standby "$color"; then
				continue;
			fi

			if [[ ! -r "/sys/class/block/$dev/stat" ]]; then
				echo "$COLOR_DISK_UNAVAIL" > "/sys/class/leds/$led/color"
				echo "breath 5000 5000"    > "/sys/class/leds/$led/blink_type"
				echo "Disk /dev/$dev went offline at: $(date --rfc-3339=seconds)"
			fi
		done
		sleep "${CHECK_DISK_ONLINE_INTERVAL}s"
	done
) &
disk_online_check_pid="$!"

diskiomon_args() {
	for led in "${!dev_map[@]}"; do
		echo "${dev_map[$led]}"
		echo "$led"
	done
}

# => monitor disk standby modes ----------------------------------------------------------------------------------- {{{1

# STANDBY_MON_PATH="${STANDBY_MON_PATH:=/usr/bin/ugreen-check-standby}"
# STANDBY_CHECK_INTERVAL="${STANDBY_CHECK_INTERVAL:-1}"
# if [[ -x "$STANDBY_MON_PATH" ]]; then
# 	"$STANDBY_MON_PATH" "$STANDBY_CHECK_INTERVAL" "$COLOR_DISK_STANDBY" "$COLOR_DISK_HEALTH" "$(diskiomon_args)" &
# 	standby_checker_pid="${1:-}"
# fi

# => monitor disk activities -------------------------------------------------------------------------------------- {{{1

BLINK_MON_PATH="${BLINK_MON_PATH:-/usr/bin/ugreen-blink-disk}"

if [[ -x "$BLINK_MON_PATH" ]]; then
	readarray -t args <<< "$(diskiomon_args)"
	cmd=("$BLINK_MON_PATH" "$LED_REFRESH_INTERVAL" "${args[@]}")
	echo "executing: ${cmd[*]}"
	"${cmd[@]}"
else
	declare -A last_stat
	while ((1)); do
		for led in "${!dev_map[@]}"; do
			dev="${dev_map[$led]}"
			stat="$(cat "/sys/block/$dev/stat" 2>/dev/null)"

			if [[ "${last_stat[$led]:-}" != "$stat" ]]; then
				echo 1 > "/sys/class/leds/$led/shot"
			fi

			last_stat[$led]="$stat"
		done

		sleep "${LED_REFRESH_INTERVAL}s"
	done
fi
